-- First, disable RLS temporarily to clean up
alter table profiles disable row level security;
alter table articles disable row level security;

-- Drop existing tables and policies
drop policy if exists "Public profiles are viewable by everyone" on profiles;
drop policy if exists "Users can insert their own profile" on profiles;
drop policy if exists "Users can update own profile" on profiles;
drop policy if exists "Anyone can view approved articles" on articles;
drop policy if exists "Authenticated users can insert articles" on articles;
drop policy if exists "Users can view their own articles" on articles;
drop policy if exists "Admins can view all articles" on articles;
drop policy if exists "Admins can update articles" on articles;

drop table if exists articles;
drop table if exists profiles;

-- Create profiles table
create table profiles (
  id uuid references auth.users on delete cascade,
  role text check (role in ('user', 'admin')) default 'user',
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  primary key (id)
);

-- Create articles table
create table articles (
  id bigint generated by default as identity primary key,
  title text not null,
  excerpt text not null,
  content text not null,
  author text not null,
  category text not null,
  image_url text,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  is_approved boolean default false,
  user_id uuid references auth.users on delete cascade
);

-- Enable RLS
alter table profiles enable row level security;
alter table articles enable row level security;

-- Create basic policies for profiles
create policy "Enable read access for authenticated users"
  on profiles for select
  using (auth.role() = 'authenticated');

create policy "Enable insert for users creating their own profile"
  on profiles for insert
  with check (auth.uid() = id);

create policy "Enable update for users modifying their own profile"
  on profiles for update
  using (auth.uid() = id);

-- Create policies for articles
create policy "Enable read access for approved articles"
  on articles for select
  using (is_approved = true or auth.uid() = user_id);

create policy "Enable insert for authenticated users"
  on articles for insert
  with check (auth.uid() = user_id);

create policy "Enable update for users modifying their own articles"
  on articles for update
  using (auth.uid() = user_id);

create policy "Enable delete for users deleting their own articles"
  on articles for delete
  using (auth.uid() = user_id);

-- Create triggers for updated_at
create or replace function update_updated_at_column()
returns trigger as $$
begin
  new.updated_at = timezone('utc'::text, now());
  return new;
end;
$$ language plpgsql;

create trigger handle_updated_at before update on profiles
  for each row execute procedure update_updated_at_column();

create trigger handle_updated_at before update on articles
  for each row execute procedure update_updated_at_column();

-- Grant necessary permissions
grant usage on schema public to anon, authenticated;
grant all on profiles to anon, authenticated;
grant all on articles to anon, authenticated;

-- Create indexes for better performance
create index if not exists profiles_id_idx on profiles(id);
create index if not exists articles_user_id_idx on articles(user_id);
create index if not exists articles_is_approved_idx on articles(is_approved);

-- Insert initial admin user if needed
-- Note: Replace 'admin_user_id' with the actual UUID after registration
-- insert into profiles (id, role) values ('admin_user_id', 'admin'); 