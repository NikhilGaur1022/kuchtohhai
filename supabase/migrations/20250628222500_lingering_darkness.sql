/*
  # Complete Events and Verification System

  1. New Tables
    - `events` - Store event information with organizer tracking
    - `event_registrations` - Track user registrations for events
    - `verification_applications` - Store user verification requests
  
  2. Profile Updates
    - Add verification fields to profiles table
    - Track verification status and application dates
  
  3. Security
    - Enable RLS on all new tables
    - Add comprehensive policies for events, registrations, and verifications
    - Ensure only verified users can create events
    - Ensure only admins can manage verification applications
  
  4. Performance
    - Add indexes for better query performance
    - Add triggers for automatic timestamp updates
*/

-- Drop existing policies if they exist to avoid conflicts
DROP POLICY IF EXISTS "Anyone can view upcoming events" ON events;
DROP POLICY IF EXISTS "Verified users can create events" ON events;
DROP POLICY IF EXISTS "Event organizers can update their own events" ON events;
DROP POLICY IF EXISTS "Event organizers can delete their own events" ON events;
DROP POLICY IF EXISTS "Users can register for events" ON event_registrations;
DROP POLICY IF EXISTS "Users can view their own registrations" ON event_registrations;
DROP POLICY IF EXISTS "Event organizers can view registrations for their events" ON event_registrations;
DROP POLICY IF EXISTS "Users can update their own registrations" ON event_registrations;
DROP POLICY IF EXISTS "Users can delete their own registrations" ON event_registrations;
DROP POLICY IF EXISTS "Users can create their own verification applications" ON verification_applications;
DROP POLICY IF EXISTS "Users can view their own verification applications" ON verification_applications;
DROP POLICY IF EXISTS "Admins can view all verification applications" ON verification_applications;
DROP POLICY IF EXISTS "Admins can update verification applications" ON verification_applications;

-- Drop existing triggers if they exist
DROP TRIGGER IF EXISTS update_events_updated_at ON events;
DROP TRIGGER IF EXISTS update_verification_applications_updated_at ON verification_applications;

-- Add verification fields to profiles table
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'profiles' AND column_name = 'is_verified'
  ) THEN
    ALTER TABLE profiles ADD COLUMN is_verified boolean DEFAULT false;
  END IF;
  
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'profiles' AND column_name = 'verification_status'
  ) THEN
    ALTER TABLE profiles ADD COLUMN verification_status text DEFAULT 'unverified';
  END IF;
  
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'profiles' AND column_name = 'verification_applied_at'
  ) THEN
    ALTER TABLE profiles ADD COLUMN verification_applied_at timestamptz;
  END IF;
END $$;

-- Add constraint for verification_status if it doesn't exist
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.table_constraints 
    WHERE table_name = 'profiles' AND constraint_name = 'profiles_verification_status_check'
  ) THEN
    ALTER TABLE profiles ADD CONSTRAINT profiles_verification_status_check 
      CHECK (verification_status IN ('unverified', 'pending', 'verified', 'rejected'));
  END IF;
END $$;

-- Create events table
CREATE TABLE IF NOT EXISTS events (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title text NOT NULL,
  description text,
  date date NOT NULL,
  time time,
  location text,
  image_url text,
  type text DEFAULT 'conference',
  is_virtual boolean DEFAULT false,
  max_attendees integer,
  registration_deadline timestamptz,
  price numeric(10,2) DEFAULT 0,
  organizer_id uuid NOT NULL,
  status text DEFAULT 'upcoming',
  created_at timestamptz DEFAULT now() NOT NULL,
  updated_at timestamptz DEFAULT now() NOT NULL
);

-- Add foreign key constraint for organizer_id
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.table_constraints 
    WHERE table_name = 'events' AND constraint_name = 'events_organizer_id_fkey'
  ) THEN
    ALTER TABLE events ADD CONSTRAINT events_organizer_id_fkey 
      FOREIGN KEY (organizer_id) REFERENCES profiles(id) ON DELETE CASCADE;
  END IF;
END $$;

-- Add constraints to events table if they don't exist
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.table_constraints 
    WHERE table_name = 'events' AND constraint_name = 'events_type_check'
  ) THEN
    ALTER TABLE events ADD CONSTRAINT events_type_check 
      CHECK (type IN ('conference', 'webinar', 'workshop', 'seminar', 'networking'));
  END IF;
  
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.table_constraints 
    WHERE table_name = 'events' AND constraint_name = 'events_status_check'
  ) THEN
    ALTER TABLE events ADD CONSTRAINT events_status_check 
      CHECK (status IN ('upcoming', 'ongoing', 'completed', 'cancelled'));
  END IF;
END $$;

-- Create event_registrations table
CREATE TABLE IF NOT EXISTS event_registrations (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  event_id bigint NOT NULL,
  user_id uuid NOT NULL,
  registration_date timestamptz DEFAULT now() NOT NULL,
  status text DEFAULT 'registered',
  notes text,
  created_at timestamptz DEFAULT now() NOT NULL
);

-- Add foreign key constraints for event_registrations
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.table_constraints 
    WHERE table_name = 'event_registrations' AND constraint_name = 'event_registrations_event_id_fkey'
  ) THEN
    ALTER TABLE event_registrations ADD CONSTRAINT event_registrations_event_id_fkey 
      FOREIGN KEY (event_id) REFERENCES events(id) ON DELETE CASCADE;
  END IF;
  
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.table_constraints 
    WHERE table_name = 'event_registrations' AND constraint_name = 'event_registrations_user_id_fkey'
  ) THEN
    ALTER TABLE event_registrations ADD CONSTRAINT event_registrations_user_id_fkey 
      FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE;
  END IF;
END $$;

-- Add unique constraint and status check to event_registrations
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.table_constraints 
    WHERE table_name = 'event_registrations' AND constraint_name = 'event_registrations_event_id_user_id_key'
  ) THEN
    ALTER TABLE event_registrations ADD CONSTRAINT event_registrations_event_id_user_id_key 
      UNIQUE(event_id, user_id);
  END IF;
  
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.table_constraints 
    WHERE table_name = 'event_registrations' AND constraint_name = 'event_registrations_status_check'
  ) THEN
    ALTER TABLE event_registrations ADD CONSTRAINT event_registrations_status_check 
      CHECK (status IN ('registered', 'attended', 'cancelled'));
  END IF;
END $$;

-- Create verification_applications table
CREATE TABLE IF NOT EXISTS verification_applications (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid NOT NULL,
  business_name text NOT NULL,
  business_type text NOT NULL,
  business_address text NOT NULL,
  business_phone text NOT NULL,
  business_email text NOT NULL,
  business_license text,
  identity_document text,
  experience_description text,
  website_url text,
  social_media_links jsonb,
  additional_info text,
  status text DEFAULT 'pending',
  admin_notes text,
  reviewed_by uuid,
  reviewed_at timestamptz,
  created_at timestamptz DEFAULT now() NOT NULL,
  updated_at timestamptz DEFAULT now() NOT NULL
);

-- Add foreign key constraints for verification_applications
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.table_constraints 
    WHERE table_name = 'verification_applications' AND constraint_name = 'verification_applications_user_id_fkey'
  ) THEN
    ALTER TABLE verification_applications ADD CONSTRAINT verification_applications_user_id_fkey 
      FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE;
  END IF;
  
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.table_constraints 
    WHERE table_name = 'verification_applications' AND constraint_name = 'verification_applications_reviewed_by_fkey'
  ) THEN
    ALTER TABLE verification_applications ADD CONSTRAINT verification_applications_reviewed_by_fkey 
      FOREIGN KEY (reviewed_by) REFERENCES profiles(id);
  END IF;
END $$;

-- Add status check constraint to verification_applications
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.table_constraints 
    WHERE table_name = 'verification_applications' AND constraint_name = 'verification_applications_status_check'
  ) THEN
    ALTER TABLE verification_applications ADD CONSTRAINT verification_applications_status_check 
      CHECK (status IN ('pending', 'approved', 'rejected'));
  END IF;
END $$;

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_events_organizer_id ON events(organizer_id);
CREATE INDEX IF NOT EXISTS idx_events_date ON events(date);
CREATE INDEX IF NOT EXISTS idx_events_status ON events(status);
CREATE INDEX IF NOT EXISTS idx_event_registrations_event_id ON event_registrations(event_id);
CREATE INDEX IF NOT EXISTS idx_event_registrations_user_id ON event_registrations(user_id);
CREATE INDEX IF NOT EXISTS idx_verification_applications_user_id ON verification_applications(user_id);
CREATE INDEX IF NOT EXISTS idx_verification_applications_status ON verification_applications(status);

-- Enable RLS
ALTER TABLE events ENABLE ROW LEVEL SECURITY;
ALTER TABLE event_registrations ENABLE ROW LEVEL SECURITY;
ALTER TABLE verification_applications ENABLE ROW LEVEL SECURITY;

-- Events policies
CREATE POLICY "Anyone can view upcoming events"
  ON events FOR SELECT
  USING (status = 'upcoming');

CREATE POLICY "Verified users can create events"
  ON events FOR INSERT
  TO authenticated
  WITH CHECK (
    organizer_id = auth.uid() AND 
    EXISTS (
      SELECT 1 FROM profiles 
      WHERE id = auth.uid() AND is_verified = true
    )
  );

CREATE POLICY "Event organizers can update their own events"
  ON events FOR UPDATE
  TO authenticated
  USING (organizer_id = auth.uid());

CREATE POLICY "Event organizers can delete their own events"
  ON events FOR DELETE
  TO authenticated
  USING (organizer_id = auth.uid());

-- Event registrations policies
CREATE POLICY "Users can register for events"
  ON event_registrations FOR INSERT
  TO authenticated
  WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can view their own registrations"
  ON event_registrations FOR SELECT
  TO authenticated
  USING (user_id = auth.uid());

CREATE POLICY "Event organizers can view registrations for their events"
  ON event_registrations FOR SELECT
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM events 
      WHERE id = event_registrations.event_id AND organizer_id = auth.uid()
    )
  );

CREATE POLICY "Users can update their own registrations"
  ON event_registrations FOR UPDATE
  TO authenticated
  USING (user_id = auth.uid());

CREATE POLICY "Users can delete their own registrations"
  ON event_registrations FOR DELETE
  TO authenticated
  USING (user_id = auth.uid());

-- Verification applications policies
CREATE POLICY "Users can create their own verification applications"
  ON verification_applications FOR INSERT
  TO authenticated
  WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can view their own verification applications"
  ON verification_applications FOR SELECT
  TO authenticated
  USING (user_id = auth.uid());

CREATE POLICY "Admins can view all verification applications"
  ON verification_applications FOR SELECT
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM profiles 
      WHERE id = auth.uid() AND role = 'admin'
    )
  );

CREATE POLICY "Admins can update verification applications"
  ON verification_applications FOR UPDATE
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM profiles 
      WHERE id = auth.uid() AND role = 'admin'
    )
  );

-- Create triggers for updated_at
CREATE TRIGGER update_events_updated_at
  BEFORE UPDATE ON events
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_verification_applications_updated_at
  BEFORE UPDATE ON verification_applications
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();