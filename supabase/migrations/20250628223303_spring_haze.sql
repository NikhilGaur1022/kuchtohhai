/*
  # Fix Verification System Database Schema

  1. Database Schema Fixes
    - Fix foreign key references to use profiles(id) instead of users(id)
    - Ensure proper RLS policies for admin access
    - Add missing notification types

  2. Admin Access
    - Fix policies so admins can view all verification applications
    - Ensure proper foreign key relationships

  3. Verification Flow
    - Complete verification application process
    - Proper status tracking and notifications
*/

-- First, let's check if we need to update the notifications table
DO $$
BEGIN
  -- Update notifications type constraint to include new types
  IF EXISTS (
    SELECT 1 FROM information_schema.table_constraints 
    WHERE table_name = 'notifications' AND constraint_name = 'notifications_type_check'
  ) THEN
    ALTER TABLE notifications DROP CONSTRAINT notifications_type_check;
  END IF;
  
  ALTER TABLE notifications ADD CONSTRAINT notifications_type_check 
    CHECK (type = ANY (ARRAY[
      'article_approved'::text, 
      'article_rejected'::text, 
      'article_deleted'::text, 
      'application_approved'::text, 
      'application_rejected'::text, 
      'general'::text
    ]));
END $$;

-- Drop existing policies to recreate them properly
DROP POLICY IF EXISTS "Anyone can view upcoming events" ON events;
DROP POLICY IF EXISTS "Verified users can create events" ON events;
DROP POLICY IF EXISTS "Event organizers can update their own events" ON events;
DROP POLICY IF EXISTS "Event organizers can delete their own events" ON events;
DROP POLICY IF EXISTS "Users can register for events" ON event_registrations;
DROP POLICY IF EXISTS "Users can view their own registrations" ON event_registrations;
DROP POLICY IF EXISTS "Event organizers can view registrations for their events" ON event_registrations;
DROP POLICY IF EXISTS "Users can update their own registrations" ON event_registrations;
DROP POLICY IF EXISTS "Users can delete their own registrations" ON event_registrations;
DROP POLICY IF EXISTS "Users can create their own verification applications" ON verification_applications;
DROP POLICY IF EXISTS "Users can view their own verification applications" ON verification_applications;
DROP POLICY IF EXISTS "Admins can view all verification applications" ON verification_applications;
DROP POLICY IF EXISTS "Admins can update verification applications" ON verification_applications;

-- Drop existing triggers
DROP TRIGGER IF EXISTS update_events_updated_at ON events;
DROP TRIGGER IF EXISTS update_verification_applications_updated_at ON verification_applications;

-- Add verification fields to profiles table if they don't exist
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'profiles' AND column_name = 'is_verified'
  ) THEN
    ALTER TABLE profiles ADD COLUMN is_verified boolean DEFAULT false;
  END IF;
  
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'profiles' AND column_name = 'verification_status'
  ) THEN
    ALTER TABLE profiles ADD COLUMN verification_status text DEFAULT 'unverified';
  END IF;
  
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'profiles' AND column_name = 'verification_applied_at'
  ) THEN
    ALTER TABLE profiles ADD COLUMN verification_applied_at timestamptz;
  END IF;
END $$;

-- Add constraint for verification_status if it doesn't exist
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.table_constraints 
    WHERE table_name = 'profiles' AND constraint_name = 'profiles_verification_status_check'
  ) THEN
    ALTER TABLE profiles ADD CONSTRAINT profiles_verification_status_check 
      CHECK (verification_status IN ('unverified', 'pending', 'verified', 'rejected'));
  END IF;
END $$;

-- Create events table if it doesn't exist
CREATE TABLE IF NOT EXISTS events (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title text NOT NULL,
  description text,
  date date NOT NULL,
  time time,
  location text,
  image_url text,
  type text DEFAULT 'conference',
  is_virtual boolean DEFAULT false,
  max_attendees integer,
  registration_deadline timestamptz,
  price numeric(10,2) DEFAULT 0,
  organizer_id uuid NOT NULL,
  status text DEFAULT 'upcoming',
  created_at timestamptz DEFAULT now() NOT NULL,
  updated_at timestamptz DEFAULT now() NOT NULL
);

-- Add foreign key constraint for organizer_id to reference profiles
DO $$
BEGIN
  -- Drop existing foreign key if it exists
  IF EXISTS (
    SELECT 1 FROM information_schema.table_constraints 
    WHERE table_name = 'events' AND constraint_name = 'events_organizer_id_fkey'
  ) THEN
    ALTER TABLE events DROP CONSTRAINT events_organizer_id_fkey;
  END IF;
  
  -- Add correct foreign key constraint
  ALTER TABLE events ADD CONSTRAINT events_organizer_id_fkey 
    FOREIGN KEY (organizer_id) REFERENCES profiles(id) ON DELETE CASCADE;
END $$;

-- Add constraints to events table
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.table_constraints 
    WHERE table_name = 'events' AND constraint_name = 'events_type_check'
  ) THEN
    ALTER TABLE events ADD CONSTRAINT events_type_check 
      CHECK (type IN ('conference', 'webinar', 'workshop', 'seminar', 'networking'));
  END IF;
  
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.table_constraints 
    WHERE table_name = 'events' AND constraint_name = 'events_status_check'
  ) THEN
    ALTER TABLE events ADD CONSTRAINT events_status_check 
      CHECK (status IN ('upcoming', 'ongoing', 'completed', 'cancelled'));
  END IF;
END $$;

-- Create event_registrations table if it doesn't exist
CREATE TABLE IF NOT EXISTS event_registrations (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  event_id bigint NOT NULL,
  user_id uuid NOT NULL,
  registration_date timestamptz DEFAULT now() NOT NULL,
  status text DEFAULT 'registered',
  notes text,
  created_at timestamptz DEFAULT now() NOT NULL
);

-- Add foreign key constraints for event_registrations to reference profiles
DO $$
BEGIN
  -- Drop existing foreign keys if they exist
  IF EXISTS (
    SELECT 1 FROM information_schema.table_constraints 
    WHERE table_name = 'event_registrations' AND constraint_name = 'event_registrations_event_id_fkey'
  ) THEN
    ALTER TABLE event_registrations DROP CONSTRAINT event_registrations_event_id_fkey;
  END IF;
  
  IF EXISTS (
    SELECT 1 FROM information_schema.table_constraints 
    WHERE table_name = 'event_registrations' AND constraint_name = 'event_registrations_user_id_fkey'
  ) THEN
    ALTER TABLE event_registrations DROP CONSTRAINT event_registrations_user_id_fkey;
  END IF;
  
  -- Add correct foreign key constraints
  ALTER TABLE event_registrations ADD CONSTRAINT event_registrations_event_id_fkey 
    FOREIGN KEY (event_id) REFERENCES events(id) ON DELETE CASCADE;
  ALTER TABLE event_registrations ADD CONSTRAINT event_registrations_user_id_fkey 
    FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE;
END $$;

-- Add unique constraint and status check to event_registrations
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.table_constraints 
    WHERE table_name = 'event_registrations' AND constraint_name = 'event_registrations_event_id_user_id_key'
  ) THEN
    ALTER TABLE event_registrations ADD CONSTRAINT event_registrations_event_id_user_id_key 
      UNIQUE(event_id, user_id);
  END IF;
  
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.table_constraints 
    WHERE table_name = 'event_registrations' AND constraint_name = 'event_registrations_status_check'
  ) THEN
    ALTER TABLE event_registrations ADD CONSTRAINT event_registrations_status_check 
      CHECK (status IN ('registered', 'attended', 'cancelled'));
  END IF;
END $$;

-- Create verification_applications table if it doesn't exist
CREATE TABLE IF NOT EXISTS verification_applications (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid NOT NULL,
  business_name text NOT NULL,
  business_type text NOT NULL,
  business_address text NOT NULL,
  business_phone text NOT NULL,
  business_email text NOT NULL,
  business_license text,
  identity_document text,
  experience_description text,
  website_url text,
  social_media_links jsonb,
  additional_info text,
  status text DEFAULT 'pending',
  admin_notes text,
  reviewed_by uuid,
  reviewed_at timestamptz,
  created_at timestamptz DEFAULT now() NOT NULL,
  updated_at timestamptz DEFAULT now() NOT NULL
);

-- Add foreign key constraints for verification_applications to reference profiles
DO $$
BEGIN
  -- Drop existing foreign keys if they exist
  IF EXISTS (
    SELECT 1 FROM information_schema.table_constraints 
    WHERE table_name = 'verification_applications' AND constraint_name = 'verification_applications_user_id_fkey'
  ) THEN
    ALTER TABLE verification_applications DROP CONSTRAINT verification_applications_user_id_fkey;
  END IF;
  
  IF EXISTS (
    SELECT 1 FROM information_schema.table_constraints 
    WHERE table_name = 'verification_applications' AND constraint_name = 'verification_applications_reviewed_by_fkey'
  ) THEN
    ALTER TABLE verification_applications DROP CONSTRAINT verification_applications_reviewed_by_fkey;
  END IF;
  
  -- Add correct foreign key constraints
  ALTER TABLE verification_applications ADD CONSTRAINT verification_applications_user_id_fkey 
    FOREIGN KEY (user_id) REFERENCES profiles(id) ON DELETE CASCADE;
  ALTER TABLE verification_applications ADD CONSTRAINT verification_applications_reviewed_by_fkey 
    FOREIGN KEY (reviewed_by) REFERENCES profiles(id);
END $$;

-- Add status check constraint to verification_applications
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.table_constraints 
    WHERE table_name = 'verification_applications' AND constraint_name = 'verification_applications_status_check'
  ) THEN
    ALTER TABLE verification_applications ADD CONSTRAINT verification_applications_status_check 
      CHECK (status IN ('pending', 'approved', 'rejected'));
  END IF;
END $$;

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_events_organizer_id ON events(organizer_id);
CREATE INDEX IF NOT EXISTS idx_events_date ON events(date);
CREATE INDEX IF NOT EXISTS idx_events_status ON events(status);
CREATE INDEX IF NOT EXISTS idx_event_registrations_event_id ON event_registrations(event_id);
CREATE INDEX IF NOT EXISTS idx_event_registrations_user_id ON event_registrations(user_id);
CREATE INDEX IF NOT EXISTS idx_verification_applications_user_id ON verification_applications(user_id);
CREATE INDEX IF NOT EXISTS idx_verification_applications_status ON verification_applications(status);

-- Enable RLS
ALTER TABLE events ENABLE ROW LEVEL SECURITY;
ALTER TABLE event_registrations ENABLE ROW LEVEL SECURITY;
ALTER TABLE verification_applications ENABLE ROW LEVEL SECURITY;

-- Events policies
CREATE POLICY "Anyone can view upcoming events"
  ON events FOR SELECT
  USING (status = 'upcoming');

CREATE POLICY "Verified users can create events"
  ON events FOR INSERT
  TO authenticated
  WITH CHECK (
    organizer_id = auth.uid() AND 
    EXISTS (
      SELECT 1 FROM profiles 
      WHERE id = auth.uid() AND is_verified = true
    )
  );

CREATE POLICY "Event organizers can update their own events"
  ON events FOR UPDATE
  TO authenticated
  USING (organizer_id = auth.uid());

CREATE POLICY "Event organizers can delete their own events"
  ON events FOR DELETE
  TO authenticated
  USING (organizer_id = auth.uid());

-- Event registrations policies
CREATE POLICY "Users can register for events"
  ON event_registrations FOR INSERT
  TO authenticated
  WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can view their own registrations"
  ON event_registrations FOR SELECT
  TO authenticated
  USING (user_id = auth.uid());

CREATE POLICY "Event organizers can view registrations for their events"
  ON event_registrations FOR SELECT
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM events 
      WHERE id = event_registrations.event_id AND organizer_id = auth.uid()
    )
  );

CREATE POLICY "Users can update their own registrations"
  ON event_registrations FOR UPDATE
  TO authenticated
  USING (user_id = auth.uid());

CREATE POLICY "Users can delete their own registrations"
  ON event_registrations FOR DELETE
  TO authenticated
  USING (user_id = auth.uid());

-- Verification applications policies - FIXED FOR ADMIN ACCESS
CREATE POLICY "Users can create their own verification applications"
  ON verification_applications FOR INSERT
  TO authenticated
  WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can view their own verification applications"
  ON verification_applications FOR SELECT
  TO authenticated
  USING (user_id = auth.uid());

-- CRITICAL FIX: Admin policy for viewing all verification applications
CREATE POLICY "Admins can view all verification applications"
  ON verification_applications FOR SELECT
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM profiles 
      WHERE id = auth.uid() AND role = 'admin'
    )
  );

-- CRITICAL FIX: Admin policy for updating verification applications
CREATE POLICY "Admins can update verification applications"
  ON verification_applications FOR UPDATE
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM profiles 
      WHERE id = auth.uid() AND role = 'admin'
    )
  );

-- Create triggers for updated_at
CREATE TRIGGER update_events_updated_at
  BEFORE UPDATE ON events
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_verification_applications_updated_at
  BEFORE UPDATE ON verification_applications
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- Insert some test data to verify the system works
-- Note: This will only work if there are existing profiles
DO $$
DECLARE
  test_user_id uuid;
  admin_user_id uuid;
BEGIN
  -- Get the first user to create a test verification application
  SELECT id INTO test_user_id FROM profiles WHERE role = 'user' LIMIT 1;
  SELECT id INTO admin_user_id FROM profiles WHERE role = 'admin' LIMIT 1;
  
  -- Only insert test data if we have users
  IF test_user_id IS NOT NULL THEN
    -- Insert a test verification application if none exists
    INSERT INTO verification_applications (
      user_id,
      business_name,
      business_type,
      business_address,
      business_phone,
      business_email,
      experience_description,
      status
    )
    SELECT 
      test_user_id,
      'Test Dental Clinic',
      'dental_clinic',
      '123 Main St, Test City, TC 12345',
      '+1-555-123-4567',
      'test@testclinic.com',
      'Experienced dental professional with 10+ years in general dentistry.',
      'pending'
    WHERE NOT EXISTS (
      SELECT 1 FROM verification_applications WHERE user_id = test_user_id
    );
  END IF;
END $$;