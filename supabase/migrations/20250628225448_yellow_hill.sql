/*
  # Add Jobs System

  1. New Tables
    - `job_postings`
      - `id` (bigint, primary key)
      - `title` (text, job title)
      - `company_name` (text, company name)
      - `location` (text, job location)
      - `job_type` (text, full-time/part-time/contract)
      - `experience_level` (text, entry/mid/senior)
      - `salary_range` (text, salary information)
      - `description` (text, job description)
      - `requirements` (text[], job requirements)
      - `benefits` (text[], job benefits)
      - `application_deadline` (timestamptz, deadline)
      - `is_active` (boolean, job status)
      - `posted_by` (uuid, references profiles)
      - `created_at` (timestamptz)
      - `updated_at` (timestamptz)
    
    - `job_applications`
      - `id` (bigint, primary key)
      - `job_id` (bigint, references job_postings)
      - `applicant_id` (uuid, references profiles)
      - `cover_letter` (text, application cover letter)
      - `resume_url` (text, resume file URL)
      - `status` (text, application status)
      - `applied_at` (timestamptz)
      - `reviewed_at` (timestamptz)
      - `notes` (text, employer notes)

  2. Security
    - Enable RLS on both tables
    - Add policies for job posting and application management
    - Verified users can post jobs
    - Anyone can view active jobs
    - Users can apply for jobs
    - Job posters can view applications for their jobs

  3. Indexes
    - Performance indexes for common queries
*/

-- Create job_postings table
CREATE TABLE IF NOT EXISTS job_postings (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title text NOT NULL,
  company_name text NOT NULL,
  location text NOT NULL,
  job_type text NOT NULL CHECK (job_type IN ('full-time', 'part-time', 'contract', 'internship')),
  experience_level text NOT NULL CHECK (experience_level IN ('entry', 'mid', 'senior', 'executive')),
  salary_range text,
  description text NOT NULL,
  requirements text[],
  benefits text[],
  application_deadline timestamptz,
  is_active boolean DEFAULT true,
  posted_by uuid NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  created_at timestamptz DEFAULT now() NOT NULL,
  updated_at timestamptz DEFAULT now() NOT NULL
);

-- Create job_applications table
CREATE TABLE IF NOT EXISTS job_applications (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  job_id bigint NOT NULL REFERENCES job_postings(id) ON DELETE CASCADE,
  applicant_id uuid NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  cover_letter text NOT NULL,
  resume_url text,
  status text DEFAULT 'pending' CHECK (status IN ('pending', 'reviewed', 'shortlisted', 'rejected', 'hired')),
  applied_at timestamptz DEFAULT now() NOT NULL,
  reviewed_at timestamptz,
  notes text,
  created_at timestamptz DEFAULT now() NOT NULL,
  UNIQUE(job_id, applicant_id)
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_job_postings_posted_by ON job_postings(posted_by);
CREATE INDEX IF NOT EXISTS idx_job_postings_is_active ON job_postings(is_active);
CREATE INDEX IF NOT EXISTS idx_job_postings_job_type ON job_postings(job_type);
CREATE INDEX IF NOT EXISTS idx_job_postings_experience_level ON job_postings(experience_level);
CREATE INDEX IF NOT EXISTS idx_job_applications_job_id ON job_applications(job_id);
CREATE INDEX IF NOT EXISTS idx_job_applications_applicant_id ON job_applications(applicant_id);
CREATE INDEX IF NOT EXISTS idx_job_applications_status ON job_applications(status);

-- Enable RLS
ALTER TABLE job_postings ENABLE ROW LEVEL SECURITY;
ALTER TABLE job_applications ENABLE ROW LEVEL SECURITY;

-- Job postings policies
CREATE POLICY "Anyone can view active job postings"
  ON job_postings FOR SELECT
  USING (is_active = true);

CREATE POLICY "Job posters can view their own postings"
  ON job_postings FOR SELECT
  TO authenticated
  USING (posted_by = auth.uid());

CREATE POLICY "Verified users can create job postings"
  ON job_postings FOR INSERT
  TO authenticated
  WITH CHECK (
    posted_by = auth.uid() AND 
    EXISTS (
      SELECT 1 FROM profiles 
      WHERE id = auth.uid() AND is_verified = true
    )
  );

CREATE POLICY "Job posters can update their own postings"
  ON job_postings FOR UPDATE
  TO authenticated
  USING (posted_by = auth.uid());

CREATE POLICY "Job posters can delete their own postings"
  ON job_postings FOR DELETE
  TO authenticated
  USING (posted_by = auth.uid());

-- Job applications policies
CREATE POLICY "Users can apply for jobs"
  ON job_applications FOR INSERT
  TO authenticated
  WITH CHECK (applicant_id = auth.uid());

CREATE POLICY "Applicants can view their own applications"
  ON job_applications FOR SELECT
  TO authenticated
  USING (applicant_id = auth.uid());

CREATE POLICY "Job posters can view applications for their jobs"
  ON job_applications FOR SELECT
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM job_postings 
      WHERE id = job_applications.job_id AND posted_by = auth.uid()
    )
  );

CREATE POLICY "Job posters can update applications for their jobs"
  ON job_applications FOR UPDATE
  TO authenticated
  USING (
    EXISTS (
      SELECT 1 FROM job_postings 
      WHERE id = job_applications.job_id AND posted_by = auth.uid()
    )
  );

CREATE POLICY "Applicants can update their own applications"
  ON job_applications FOR UPDATE
  TO authenticated
  USING (applicant_id = auth.uid());

-- Create triggers for updated_at
CREATE TRIGGER update_job_postings_updated_at
  BEFORE UPDATE ON job_postings
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- Add job-related notification types
DO $$
BEGIN
  -- Check if the constraint exists and drop it
  IF EXISTS (
    SELECT 1 FROM information_schema.table_constraints 
    WHERE constraint_name = 'notifications_type_check' 
    AND table_name = 'notifications'
  ) THEN
    ALTER TABLE notifications DROP CONSTRAINT notifications_type_check;
  END IF;
  
  -- Add the new constraint with job notification types
  ALTER TABLE notifications ADD CONSTRAINT notifications_type_check 
    CHECK (type = ANY (ARRAY[
      'article_approved'::text, 
      'article_rejected'::text, 
      'article_deleted'::text, 
      'application_approved'::text, 
      'application_rejected'::text, 
      'job_application_received'::text,
      'job_application_status_updated'::text,
      'general'::text
    ]));
END $$;